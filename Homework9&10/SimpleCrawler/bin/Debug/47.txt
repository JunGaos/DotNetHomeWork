<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    <meta name="description" content="一次偶然的机会，让我拿出RulesEngine去完成一个业务，对于业务来说主要是完成一个可伸缩性（不确定的类型，以及不确定的条件，条件的变动可能是持续增加修改的）的业务判断。比如说完成一个成就系统，管" />
    <meta property="og:description" content="一次偶然的机会，让我拿出RulesEngine去完成一个业务，对于业务来说主要是完成一个可伸缩性（不确定的类型，以及不确定的条件，条件的变动可能是持续增加修改的）的业务判断。比如说完成一个成就系统，管" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>.NET RulesEngine（规则引擎） - HueiFeng - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    <link id="MainCss" rel="stylesheet" href="/skins/lessismoreright/bundle-lessismoreright.min.css?v=00nt3ajQUVX0gvFynxRY-4TOqQaW32yFChuBOrvOqLk" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/lessismoreright/bundle-lessismoreright-mobile.min.css?v=cSBXSFXCBG9KdnF2sdUs-Rwu75GHG2_Gs50OCy_ecGg" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/yyfh/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/yyfh/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/yyfh/wlwmanifest.xml" />
    <script>
        var currentBlogId = 329108;
        var currentBlogApp = 'yyfh';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'LessIsMoreRight';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2021-04-29 11:13';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=yJQaJ16S00coMfzvh-NgF2zm2J87f5VfNamFdsnKHrc"></script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;v=20200504"></script>
    
</head>
<body class="has-navbar has-bannerbar">
    <a name="top"></a>
        <a target="_blank" href="https://www.aliyun.com/minisite/goods?userCode=swh7dvlt" onclick="ga('send', 'event', 'Link', 'click', 'aliyun-cps-blog-bannerbar-pc')">
            <div class="bannerbar aliyun forpc" style="background-size: contain;background-image: url(https://img2020.cnblogs.com/blog/35695/202104/35695-20210428221933214-737067094.jpg)">
            </div>
        </a>
        <div id="bannerbar" class="bannerbar-mobile formobile">
            <a href="https://www.aliyun.com/minisite/goods?userCode=swh7dvlt" target="_blank" onclick="ga('send', 'event', 'Link', 'click', 'aliyun-cps-blog-bannerbar-mobile')">
                <img src="https://img2020.cnblogs.com/blog/35695/202104/35695-20210428213541700-642740375.jpg" alt="" />
            </a>
        </div>
    <div id="top_nav" class="navbar forpc">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    <div id="home">
    <div id="header">
        <div id="blogTitle">
            <div class="title"><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/yyfh/">冯辉</a>
</div>
<div class="subtitle"></div>

        </div>
        <div id="navigator">
            
<ul id="navList">
    <li id="nav_sitehome"><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
    <li id="nav_myhome">
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/yyfh/">
首页</a>
</li>
    <li id="nav_newpost">

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
    <li id="nav_contact">
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/HueiFeng">
联系</a></li>
    <li id="nav_rss">
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/yyfh/rss/">
订阅</a></li>
    <li id="nav_admin">
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>

            <div class="blogStats">
                <div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
            </div>
        </div>
    </div>
    <div id="main">
        <div id="mainContent">
            <div class="forFlow">
                <div id="post_detail">
    <div id="topics">
        <div class="post">
            <h1 class="postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/yyfh/p/14720182.html">
    <span>.NET RulesEngine（规则引擎）</span>
    



</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>一次偶然的机会，让我拿出RulesEngine去完成一个业务，对于业务来说主要是完成一个可伸缩性（不确定的类型，以及不确定的条件，条件的变动可能是持续增加修改的）的业务判断。比如说完成一个成就系统，管理员可创建，对于成就来说有一次性解锁、日常、周常式，还有随时重置，每次达成都触发的，面对着成就任务的增加，那对于程序员来说，如果每次都去增加修改这些成就任务简直是太头疼了。好了，对此大家应该有一个简单的了解了，那跟着笔者往下走，我们看看如何在.NET中使用非常少的代码去完成一个简单的动态逻辑处理。</p>
<h2 id="rulesengine-概述">RulesEngine 概述</h2>
<p>RulesEngine是<a href="https://docs.microsoft.com/zh-cn/?WT.mc_id=DT-MVP-5003855" target="_blank">Microsoft</a>推出的一个规则引擎项目，用于系统中抽象出的业务逻辑/规则/策略。在我们开发的过程中，避免不了的是跟这种反反复复的业务逻辑进行处理，而对于这种动态的规则来说的话，它是比较优雅的一种方式，使用我们减少了对我们代码或者说项目的修改。</p>
<h2 id="如何使用">如何使用</h2>
<p>目前我们可以通过nuget的形式进行引入该库，如下所示：</p>
<pre><code>dotnet add package RulesEngine 
</code></pre>
<p>对于规则的配置来说，大家可以直接通过类型化参数，笔者主要是为了大家可以清晰的明白，所以用JSON化配置来做演示。</p>
<pre><code>//反序列化Json格式规则字符串
var workflowRules = JsonConvert.DeserializeObject&lt;List&lt;WorkflowRules&gt;&gt;(rulesStr);
 var rulesEngine = new RulesEngine.RulesEngine(workflowRules.ToArray());
</code></pre>
<pre><code> //定义规则
            var rulesStr = @"[{
                    ""WorkflowName"": ""UserInputWorkflow"",
                    ""Rules"": [
                      {
                        ""RuleName"": ""CheckAge"",
                        ""ErrorMessage"": ""年龄必须大于18岁."",
                        ""ErrorType"": ""Error"",
                        ""RuleExpressionType"": ""LambdaExpression"",
                        ""Expression"": ""Age &gt; 18""
                      },
                       {
                        ""RuleName"": ""CheckIDNoIsEmpty"",
                        ""ErrorMessage"": ""身份证号不可以为空."",
                         ""ErrorType"": ""Error"",
                        ""RuleExpressionType"": ""LambdaExpression"",
                        ""Expression"": ""IdNo != null""
                      }
                    ]
                  }] ";
</code></pre>
<p>如上所示我们定义了规则信息，对于该信息，对于规则信息笔者默认存储的还是JSON数据，当然大家可以进行存储如下内容，将如下数据结构拆分存储到数据库中。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>RuleName</td>
<td>规则名称</td>
</tr>
<tr>
<td>Properties</td>
<td>规则属性，获取或设置规则的自定义属性或者标记</td>
</tr>
<tr>
<td>Operator</td>
<td>操作符</td>
</tr>
<tr>
<td>ErrorMessage</td>
<td>错误消息</td>
</tr>
<tr>
<td>Enabled</td>
<td>获取和设置规则是否已启用</td>
</tr>
<tr>
<td>RuleExpressionType</td>
<td>规则表达式类型，默认为LambdaExpression，当然目前只有这么一个</td>
</tr>
<tr>
<td>WorkflowRulesToInJect</td>
<td>注入工作流程规则</td>
</tr>
<tr>
<td>Rules</td>
<td>规则</td>
</tr>
<tr>
<td>LocalParams</td>
<td>本地参数</td>
</tr>
<tr>
<td>Expression</td>
<td>表达树</td>
</tr>
<tr>
<td>Actions</td>
<td></td>
</tr>
<tr>
<td>SuccessEvent</td>
<td>完成事件，默认为规则名称</td>
</tr>
</tbody>
</table>
<p>我们来看一下该代码产生的结果，对于该内容笔者创建了一个类，如下所示：</p>
<pre><code>   public class UserInput
        {
            public string IdNo { get; set; }
            public int Age { get; set; }
        }
</code></pre>
<pre><code>static async Task Main(string[] args)
        {
            var userInput = new UserInput
            {
                IdNo = null,
                Age = 18
            };

            //反序列化Json格式规则字符串
            var workflowRules = JsonConvert.DeserializeObject&lt;List&lt;WorkflowRules&gt;&gt;(rulesStr);
            
            var rulesEngine = new RulesEngine.RulesEngine(workflowRules.ToArray());

            List&lt;RuleResultTree&gt; resultList = await rulesEngine.ExecuteAllRulesAsync("UserInputWorkflow", userInput);
            foreach (var item in resultList)
            {               
                 Console.WriteLine("验证成功：{0}，消息：{1}",item.IsSuccess,item.ExceptionMessage);
            }

            Console.ReadLine();

        }
</code></pre>
<p>输出结果如下所示：</p>
<pre><code>验证成功：False，消息：年龄必须大于18岁.
验证成功：False，消息：身份证号不可以为空.
</code></pre>
<p>返回结构<code>resultList</code>如下所示：</p>
<pre><code> { "Rule":{ "RuleName":"CheckNestedSimpleProp","Properties":null,"Operator":null,"ErrorMessage":"年龄必须大于18岁.",
                "ErrorType":"Error","RuleExpressionType":"LambdaExpression","WorkflowRulesToInject":null,"Rules":null,"LocalParams":null,"Expression":"Age &gt; 18","Actions":null,"SuccessEvent":null},"IsSuccess":false,"ChildResults":null,"Inputs":{ "input1":{ "IdNo":null,"Age":18} },
                "ActionResult":{ "Output":null,"Exception":null},"ExceptionMessage":"年龄必须大于18岁.","RuleEvaluatedParams":[]}
</code></pre>
<h2 id="表达树内使用扩展方法">表达树内使用扩展方法</h2>
<p>上面相信大家对于规则引擎的使用，有了一个简单的了解，下面我们再来一个进阶版内容。</p>
<p>比如我觉得通过输入的年龄不准确，我想通过身份证号去计算年龄，那么我该如何操作，正常的情况下，我们会通过扩展方法，然后将身份证号参数进行传递给处理程序，处理程序计算完成后，会返回给我们年龄，而在这个里面我们该如何操作呢？我们往下看。</p>
<p>通过ReSettings进行增加自定义类型，将扩展方法，因为它们所能使用的方法仅限于[System namespace]，所以我们需要将自定义类进行添加到设置中。</p>
<pre><code>   private static readonly ReSettings reSettings = new ReSettings
        {
            CustomTypes = new[] { typeof(IdCardUtil) }
        };
        
</code></pre>
<p>修改如下内容：</p>
<pre><code> var rulesEngine = new RulesEngine.RulesEngine(workflowRules.ToArray(), null, reSettings: reSettings);
</code></pre>
<pre><code>var rulesStr = @"[{
                    ""WorkflowName"": ""UserInputWorkflow"",
                    ""Rules"": [
                      {
                        ""RuleName"": ""CheckNestedSimpleProp"",
                        ""ErrorMessage"": ""年龄必须小于18岁."",
                        ""ErrorType"": ""Error"",
                        ""RuleExpressionType"": ""LambdaExpression"",
                        ""Expression"": ""IdNo.GetAgeByIdCard() &lt; 18""
                      },
                       {
                        ""RuleName"": ""CheckNestedSimpleProp1"",
                        ""ErrorMessage"": ""身份证号不可以为空."",
                         ""ErrorType"": ""Error"",
                        ""RuleExpressionType"": ""LambdaExpression"",
                        ""Expression"": ""IdNo != null""
                      }
                    ]
                  }] ";
</code></pre>
<p>输出结果如下所示：</p>
<pre><code>验证成功：False，消息：年龄必须小于18岁.
验证成功：True，消息：
</code></pre>
<h2 id="多对象组合条件">多对象组合条件</h2>
<p>下面我们修改了一下之前的规则内容，同时又增加了一个类<code>ListItem</code>，我们将内容赋值之后，进行创建一个匿名类型，里面两个属性，<code>user</code>和<code>items</code>，最后通过我们的多条件组合进行逻辑判断。</p>
<pre><code>            var rulesStr = @"[{
                    ""WorkflowName"": ""UserInputWorkflow"",
                    ""Rules"": [
                      {
                        ""RuleName"": ""CheckNestedSimpleProp"",
                        ""ErrorMessage"": ""Value值不是second."",
                        ""ErrorType"": ""Error"",
                        ""RuleExpressionType"": ""LambdaExpression"",
                        ""Expression"": ""user.UserId==1 &amp;&amp; items[0].Value==second""
                      }
                    ]
                  }] ";


            var userInput = new UserInput
            {
                UserId = 1,
                IdNo = "11010519491230002X",
                Age = 18
            };
            var input = new
            {
                user = userInput,
                items = new List&lt;ListItem&gt;()
                {
                    new ListItem{ Id=1,Value="first"},
                    new ListItem{ Id=2,Value="second"}
                }
            };

</code></pre>
<p>输出结果如下所示：</p>
<pre><code>验证成功：False，消息：Value值不是second.
</code></pre>
<h2 id="如何实现的？">如何实现的？</h2>
<p>对于这个，我们该根据现象去看原理，对于内部的动态树其实是使用了<a href="https://github.com/zzzprojects/System.Linq.Dynamic.Core" target="_blank">System.Linq.Dynamic.Core</a>,<code>RulesEngine</code>是建立在该库之上，进行抽象出来的，为我们提供了一个规则引擎，那我们来试一下<a href="https://github.com/zzzprojects/System.Linq.Dynamic.Core" target="_blank">System.Linq.Dynamic.Core</a>。</p>
<p>我们先查询集合数据，编辑一个条件字符串，如下所示：</p>
<pre><code>var items = input.items.AsQueryable().Where("Id == 1").ToList();


foreach (var item in items)
{
    Console.WriteLine($"Id：{item.Id},Value: {item.Value}");
}
</code></pre>
<p>输出结果：</p>
<pre><code>Id：1,Value: first
</code></pre>
<p>那我们再看看如果是通过表达树，我们是如何进行实现的，如下所示：</p>
<pre><code>            Expression&lt;Func&lt;ListItem, bool&gt;&gt; predicate = x =&gt; x.Id == 1;
            //输入条件如下
            var inputItem = new ListItem
            {
                Id = 1,
                Value = "second"
            };

            if (inputItem.Id !=null)
            {
                predicate = predicate.And(x=&gt;x.Id==inputItem.Id);
            }

            if (inputItem.Id != null)
            {
                predicate = predicate.And(x =&gt; x.Value == inputItem.Value);
            }
            
    public static class PredicateBuilder
    {
        public static Expression&lt;Func&lt;T, bool&gt;&gt; And&lt;T&gt;(this Expression&lt;Func&lt;T, bool&gt;&gt; expr1,
                                                            Expression&lt;Func&lt;T, bool&gt;&gt; expr2)
        {
            var invokedExpr = Expression.Invoke(expr2, expr1.Parameters.Cast&lt;Expression&gt;());
            return Expression.Lambda&lt;Func&lt;T, bool&gt;&gt;
                  (Expression.And(expr1.Body, invokedExpr), expr1.Parameters);
        }
    }
</code></pre>
<p>正常来说是如上这种的，我们进行条件的拼接，相信大家可以通过这种的一个条件进行一个思考，确定什么样的适合自己。</p>
<p>如果使用动态查询形式如下所示：</p>
<pre><code>var items = input.items.AsQueryable().Where("Id ==@0  &amp;&amp; Value==@1",inputItem.Id,inputItem.Value).ToList();
</code></pre>
<h2 id="成功失败事件">成功失败事件</h2>
<p>因为对于逻辑验证来说，我们既然要这样做，肯定需要知道到底成功了还是失败了。而这个我们不仅可以通过对象的<code>IsSuccess</code>还可以通过两个事件进行得到逻辑验证的失败与成功，如下所示：</p>
<pre><code>            var discountOffered = "";

            resultList.OnSuccess((eventName) =&gt;
            {
                discountOffered = $"成功事件:{eventName}.";
            });


            resultList.OnFail(() =&gt;
            {
                discountOffered = "失败事件.";
            });

</code></pre>
<h2 id="总结">总结</h2>
<p>有兴趣的话可以看一下<a href="https://github.com/zzzprojects/System.Linq.Dynamic.Core" target="_blank">System.Linq.Dynamic.Core</a>，因为关于动态表达树解析还是使用的这个项目去做的。另外项目地址在<a href="https://github.com/microsoft/RulesEngine" target="_blank">RulesEngine</a></p>
<p><a href="https://github.com/hueifeng/BlogSample/tree/master/src/RulesEngineDemo" target="_blank">https://github.com/hueifeng/BlogSample/tree/master/src/RulesEngineDemo</a></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2021-04-29 23:13</span>&nbsp;
<a href="https://www.cnblogs.com/yyfh/">HueiFeng</a>&nbsp;
阅读(<span id="post_view_count">2015</span>)&nbsp;
评论(<span id="post_comment_count">11</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14720182" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(14720182);return false;">收藏</a></div>
        </div>
        <script src="https://common.cnblogs.com/highlight/10.3.1/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 329108, cb_blogApp = 'yyfh', cb_blogUserGuid = 'f2702a43-bbde-e611-845c-ac853d9f53ac';
    var cb_entryId = 14720182, cb_entryCreatedDate = '2021-04-29 23:13', cb_postType = 1;
    updatePostStats(
        [cb_entryId],
        function(id, count) { $("#post_view_count").text(count) },
        function(id, count) { $("#post_comment_count").text(count) })
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
</script>
        <a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
    <div id="cnblogs_c2" class="under-post-card">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
       var commentManager = new blogCommentManager();
       commentManager.renderComments(0);
       fixPostBody();
       deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();
       deliverC1C2();
       loadNewsAndKb();
       loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
       loadOptUnderPost();
       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

    </div>
</div>
            </div>
        </div>

        <div id="sideBar">
            <div id="sideBarMain">
                <div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
                <div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                <script>loadBlogDefaultCalendar();</script>
                <div id="leftcontentcontainer">
                    <!-- begin:SingleColumn -->
                    <div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
                    <!-- end:  SingleColumn -->
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="clear"></div>
    <div id="footer">
        <!--done-->
Copyright &copy; 2021 HueiFeng
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>

    </div>
</div>

    <div id="page_end_html">
        <script>

        $("#MySignature").append('<div style="display: block;\r\n    border: 2px solid #e3e6e5;\r\n    padding: 10px;\r\n    background: white;">  ' +
            '\r\n<a href="https://docs.microsoft.com/zh-cn/dotnet/core/?WT.mc_id=DT-MVP-5003855">推荐链接：.NET Core开发指南</a> \r\n<br>' +
            '\r\n<a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/?view=aspnetcore-3.1&WT.mc_id=DT-MVP-5003855">推荐链接：ASP.NET Core开发指南</a> ' +
            '\r\n<br>\r\n<a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-3.1&WT.mc_id=DT-MVP-5003855">推荐链接：Web API 的 RESTful HTTP 服务</a> ' +
            '\r\n<br>\r\n<a href="https://docs.microsoft.com/en-us/azure/devops/?WT.mc_id=DOP-MVP-5003855">推荐链接：Azure DevOps(CI、CD)的系列教程</a>' +
            '\r\n<br>\r\n<a href="https://docs.microsoft.com/zh-cn/azure/?WT.mc_id=AZ-MVP-5003855">推荐链接：Azure 学习指南</a>' +
            '\r\n<br>\r\n</div>\r\n')
$("#MySignature").show()
</script>
<script>

  $("#page_end_html,#ad_t2,#cnblogs_c1,#under_post_news,#under_post_kb,#cnblogs_c2").css('display','none')

</script>
<script type="text/javascript">var cnzz_protocol = (("https:" == document.location.protocol) ? "https://" : "http://");document.write(unescape("%3Cspan id='cnzz_stat_icon_1278154726'%3E%3C/span%3E%3Cscript src='" + cnzz_protocol + "s4.cnzz.com/z_stat.php%3Fid%3D1278154726' type='text/javascript'%3E%3C/script%3E"));</script>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-155252267-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-155252267-2');
</script>
    </div>

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjsJ_osJR2cljnGYQ_QngkQgLSDJvgsmBT5HtnLMQyPQakKhcKB5hB2BTxoTgHwpAnBjmbHjos0vU0yyKo0v2BPl1jITtw7SUC54esisE7z3J8xAfwyMjmM7lpSnJNCyV9U" />
</body>
</html>
