<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    <meta name="description" content="【String】 首先，从String类的定义入手，可以看到String类是由final修饰，即不可变的，一旦创建出来就不可修改，因此首先明确，字符串的拼接、截取等操作都会产生新的字符串对象。 观察以" />
    <meta property="og:description" content="【String】 首先，从String类的定义入手，可以看到String类是由final修饰，即不可变的，一旦创建出来就不可修改，因此首先明确，字符串的拼接、截取等操作都会产生新的字符串对象。 观察以" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>【Java】String、StringBuilder和StringBuffer - H-utopia - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    <link id="MainCss" rel="stylesheet" href="/skins/codinglife/bundle-codinglife.min.css?v=2uJkpdACLVfstRQ7zeCFK19brTwKuDEaNBLgKz9nm3A" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/codinglife/bundle-codinglife-mobile.min.css?v=DwDRKMd1bmjnJZ4iQqrTCO9QLlYb6OZaUAzHoHIIihg" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/iUtopia/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/iUtopia/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/iUtopia/wlwmanifest.xml" />
    <script>
        var currentBlogId = 542641;
        var currentBlogApp = 'iUtopia';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'CodingLife';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2021-05-02 08:03';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=yJQaJ16S00coMfzvh-NgF2zm2J87f5VfNamFdsnKHrc"></script>
    
    
    
</head>
<body class="has-navbar has-bannerbar">
    <a name="top"></a>
        <a target="_blank" href="https://www.aliyun.com/minisite/goods?userCode=swh7dvlt" onclick="ga('send', 'event', 'Link', 'click', 'aliyun-cps-blog-bannerbar-pc')">
            <div class="bannerbar aliyun forpc" style="background-size: contain;background-image: url(https://img2020.cnblogs.com/blog/35695/202104/35695-20210428221933214-737067094.jpg)">
            </div>
        </a>
        <div id="bannerbar" class="bannerbar-mobile formobile">
            <a href="https://www.aliyun.com/minisite/goods?userCode=swh7dvlt" target="_blank" onclick="ga('send', 'event', 'Link', 'click', 'aliyun-cps-blog-bannerbar-mobile')">
                <img src="https://img2020.cnblogs.com/blog/35695/202104/35695-20210428213541700-642740375.jpg" alt="" />
            </a>
        </div>
    <div id="top_nav" class="navbar forpc">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    <!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/iUtopia/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/iUtopia/">H-utopia</a>
</h1>
<h2></h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/iUtopia/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/H-utopia">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/iUtopia/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/iUtopia/p/14726326.html">
    <span>【Java】String、StringBuilder和StringBuffer</span>
    



</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2 class="md-end-block md-heading"><span class="md-plain md-expand">【String】</span></h2>
<p class="md-end-block md-p"><span class="md-plain">首先，从String类的定义入手，可以看到String类是由final修饰，即不可变的，一旦创建出来就不可修改，因此首先明确，字符串的拼接、截取等操作都会产生新的字符串对象。</span></p>
<p class="md-end-block md-p">&nbsp;<img src="https://img2020.cnblogs.com/blog/1125840/202105/1125840-20210502195742448-1103920498.png" alt="" loading="lazy"></p>
<p class="md-end-block md-p"><span class="md-plain">观察以下几种创建Stirng的语句</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span> String s1 = "hello "<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">2</span> String s2 = "world"<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">3</span> String s3 = s1 +<span style="color: rgba(0, 0, 0, 1)"> s2;
</span><span style="color: rgba(0, 128, 128, 1)">4</span> String s4 = "hello " + "world"<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">5</span> String s5 = <span style="color: rgba(0, 0, 255, 1)">new</span> String("hello world");</pre>
</div>
<p class="md-end-block md-p"><span class="md-plain">1&gt; 对于s1，直接通过字符串常量创建，会先查找常量池中是否有 hello 这个字符串，有的话不创建，没有的话新建，因此会在常量池中创建一个对象。</span></p>
<p class="md-end-block md-p"><span class="md-plain">2&gt; 对于s2，同上，在常量池中创建一个对象。</span></p>
<p class="md-end-block md-p"><span class="md-plain">3&gt; 对于s3，字符串拼接操作，查看反汇编代码，字符串拼接实际上是new StringBuilder()，然后执行其append()方法，最后执行toString，过程中创建了3个对象。</span></p>
<p class="md-end-block md-p"><img src="https://img2020.cnblogs.com/blog/1125840/202105/1125840-20210502195835266-2135187342.png" alt="" loading="lazy"></p>
<p class="md-end-block md-p"><span class="md-plain">4&gt; 对于s4，直接通过常量字符串拼接，会被优化为创建 hello world，在常量池中创建对象。</span></p>
<p class="md-end-block md-p"><img src="https://img2020.cnblogs.com/blog/1125840/202105/1125840-20210502195844781-2003713415.png" alt="" loading="lazy"></p>
<p class="md-end-block md-p"><span class="md-plain">5&gt; 对于s5，new操作一定会在堆中创建对象，然后查找常量池中是否有 hello world 这个字符串，没有就在常量池中创建一个。</span></p>
<p class="md-end-block md-p"><span class="md-plain">对于s3、s4、s5，字符串的内容都是hello world，但对于s3和s5，引用的都是堆中创建的字符串对象，s4引用的则直接是常量池中的对象，因此它们三个的引用都是不同的，如下</span></p>
<p class="md-end-block md-p"><img src="https://img2020.cnblogs.com/blog/1125840/202105/1125840-20210502195857644-1537277106.png" alt="" loading="lazy"></p>
<p class="md-end-block md-p"><span class="md-pair-s"><strong>intern</strong></span></p>
<p class="md-end-block md-p"><span class="md-plain">通过上面的验证，知道直接通过常量定义的String对象是位于常量池中，而通过new显式创建或者拼接隐式创建的String对象是位于堆中。</span></p>
<p class="md-end-block md-p"><span class="md-plain">除了常用的操作字符串方法，JDK还提供了 inter() 方法，该方法的官方说明如下，作用是当方法调用时，如果常量池中已经包含一个和这个String相等(内容相同，即equals方法)的String，就会返回常量池中的对象，否则，这个对象会被添加到常量池，然后返回她的引用。简单来说其作用是把字符串缓存到常量池中。</span></p>
<p class="md-end-block md-p"><img src="https://img2020.cnblogs.com/blog/1125840/202105/1125840-20210502195934387-816442112.png" alt="" loading="lazy"></p>
<p class="md-end-block md-p"><span class="md-plain">通过几个例子来验证intern的作用</span></p>
<p class="md-end-block md-p"><img src="https://img2020.cnblogs.com/blog/1125840/202105/1125840-20210502200001092-1556057543.png" alt="" loading="lazy"></p>
<h2 class="md-end-block md-heading md-focus"><span class="md-plain md-expand">【StringBuilder和StringBuffer】</span></h2>
<p class="md-end-block md-p"><span class="md-plain">StringBuilder和StringBuffer都表示可变的字符串序列，可以通过其提供的一序列方法实现字符串的拼接、截取，观察源码会发现两个类的核心代码基本一致，二者都继承自抽象类AbstractStringBuilder。</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">二者的共同点是均提供了字符串的拼接、截取等操作，无需每次变动都创建新的对象，一次创建，最后只需通过toString生成最终的字符串对象即可。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">二者的区别在于在字符串拼接等操作上StringBuffer使用synchronized关键字修饰方法，多线程情况下保证了线程安全，当然相比StringBuilder，也降低了性能。</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-plain">通过源码来看动态拼接字符串逻辑，StringBuilder和StringBuffer都是调用父类的append方法实现，因此二者实现逻辑是一致的，其中count是用来记录value数组已经使用的长度，即在现有的value数组后面拼接上新的str字符串。因此在StringBuilder中，代码中的 count+=len 不是原子操作，多线程操作的情况下，例如当前count为5，可能出现多个线程拿到的count都是5，分别执行累加操作后再赋给count，得到的count只是6，此时便出现了线程不安全的情况。</span></p>
<p class="md-end-block md-p"><img src="https://img2020.cnblogs.com/blog/1125840/202105/1125840-20210502200021838-23771148.png" alt="" loading="lazy"></p>
<p class="md-end-block md-p"><span class="md-plain">附：虽然上面提到，通过 + 号拼接String对象时，java也会隐式地创建StringBuilder对象进行拼接，通常情况下并不会造成性能效率损失，但在需要大量循环拼接字符串时，使用+拼接，会在每次循环时都创建一个StringBuilder对象，循环结束后，内存中会多出许多无用的StringBuilder对象，因此这种情况，建议在循环体外创建StringBuilder对象，循环调用其append()方法拼接，如此只需创建一个StringBuilder对象。</span></p>
<p class="md-end-block md-p"><img src="https://img2020.cnblogs.com/blog/1125840/202105/1125840-20210502200045676-1650487619.png" alt="" loading="lazy"></p>
<p class="md-end-block md-p"><span class="md-pair-s"><strong>扩容</strong></span></p>
<p class="md-end-block md-p"><span class="md-plain">首先注意二者的初始容量都是16，当然也可以通过参数指定初始容量</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span> <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> StringBuilder() {
</span><span style="color: rgba(0, 128, 128, 1)">2</span>         <span style="color: rgba(0, 0, 255, 1)">super</span>(16<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">3</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">4</span> <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> StringBuffer() {
</span><span style="color: rgba(0, 128, 128, 1)">5</span>         <span style="color: rgba(0, 0, 255, 1)">super</span>(16<span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">6</span>     }</pre>
</div>
<p class="md-end-block md-p"><span class="md-plain">在字符串拼接时，都会调用父类AbstractStringBuilder的append方法，方法源码如下</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> AbstractStringBuilder append(String str) {
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (str == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">) {
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span>             <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> appendNull();
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>         <span style="color: rgba(0, 0, 255, 1)">int</span> len =<span style="color: rgba(0, 0, 0, 1)"> str.length();
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>         ensureCapacityInternal(count +<span style="color: rgba(0, 0, 0, 1)"> len);
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span> <span style="color: rgba(0, 0, 0, 1)">        putStringAt(count, str);
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>         count +=<span style="color: rgba(0, 0, 0, 1)"> len;
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>         <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">10</span>     }</pre>
</div>
<p class="md-end-block md-p"><span class="md-plain">其中的 ensureCapacityInternal 方法，就是在拼接前进行扩容</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span> <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> ensureCapacityInternal(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> minimumCapacity) {
</span><span style="color: rgba(0, 128, 128, 1)">2</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> overflow-conscious code</span>
<span style="color: rgba(0, 128, 128, 1)">3</span>         <span style="color: rgba(0, 0, 255, 1)">int</span> oldCapacity = value.length &gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> coder;
</span><span style="color: rgba(0, 128, 128, 1)">4</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (minimumCapacity - oldCapacity &gt; 0<span style="color: rgba(0, 0, 0, 1)">) {
</span><span style="color: rgba(0, 128, 128, 1)">5</span>             value =<span style="color: rgba(0, 0, 0, 1)"> Arrays.copyOf(value,
</span><span style="color: rgba(0, 128, 128, 1)">6</span>                     newCapacity(minimumCapacity) &lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> coder);
</span><span style="color: rgba(0, 128, 128, 1)">7</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">8</span>     }</pre>
</div>
<p class="md-end-block md-p"><span class="md-plain">其中的minimumCapacity就是扩容后的字符串长度，超过目前容量的话，调用newCapacity方法执行扩容，可以看出每次扩容后的容量是原容量的2倍加2，如果仍不够，就直接扩容到需要的长度。</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">int</span> newCapacity(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> minCapacity) {
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> overflow-conscious code</span>
<span style="color: rgba(0, 128, 128, 1)"> 3</span>         <span style="color: rgba(0, 0, 255, 1)">int</span> oldCapacity = value.length &gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> coder;
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>         <span style="color: rgba(0, 0, 255, 1)">int</span> newCapacity = (oldCapacity &lt;&lt; 1) + 2<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (newCapacity - minCapacity &lt; 0<span style="color: rgba(0, 0, 0, 1)">) {
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>             newCapacity =<span style="color: rgba(0, 0, 0, 1)"> minCapacity;
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>         <span style="color: rgba(0, 0, 255, 1)">int</span> SAFE_BOUND = MAX_ARRAY_SIZE &gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> coder;
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>         <span style="color: rgba(0, 0, 255, 1)">return</span> (newCapacity &lt;= 0 || SAFE_BOUND - newCapacity &lt; 0<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">10</span>             ?<span style="color: rgba(0, 0, 0, 1)"> hugeCapacity(minCapacity)
</span><span style="color: rgba(0, 128, 128, 1)">11</span> <span style="color: rgba(0, 0, 0, 1)">            : newCapacity;
</span><span style="color: rgba(0, 128, 128, 1)">12</span>     }</pre>
</div>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2021-05-02 20:03</span>&nbsp;
<a href="https://www.cnblogs.com/iUtopia/">H-utopia</a>&nbsp;
阅读(<span id="post_view_count">8</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14726326" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(14726326);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/10.3.1/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 542641, cb_blogApp = 'iUtopia', cb_blogUserGuid = '5fc30962-9a08-e711-845c-ac853d9f53ac';
    var cb_entryId = 14726326, cb_entryCreatedDate = '2021-05-02 20:03', cb_postType = 1;
    updatePostStats(
        [cb_entryId],
        function(id, count) { $("#post_view_count").text(count) },
        function(id, count) { $("#post_comment_count").text(count) })
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
</script>
<a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
    <div id="cnblogs_c2" class="under-post-card">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
       var commentManager = new blogCommentManager();
       commentManager.renderComments(0);
       fixPostBody();
       deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();
       deliverC1C2();
       loadNewsAndKb();
       loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
       loadOptUnderPost();
       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->
	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 H-utopia
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjsuotXRJKt63Tt9RAB4hAE0YmRv59GoKyvaDmly4sWqQQT_Jr5E-Wj7-2bce1DyWrIiZxPGXxNjU8OVM_lnTNb5SMgFch4jGBgenxMvA-xFYhD0Kl0tXLInPm-CYmj5BKY" />
</body>
</html>
